generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TicketPurchase {
  id                   String        @id @default(cuid())
  ticketType           TicketType
  amount               Float
  currency             String
  customerName         String
  customerEmail        String
  customerPhone        String
  paymentStatus        PaymentStatus
  transactionReference String        @unique
  paymentIntentId      String
  modemPayChargeId     String        @unique
  paymentMethod        String
  testMode             Boolean       @default(false)
  paymentMetadata      Json?
  customFields         Json?

  isCheckedIn Boolean   @default(false)
  checkedInAt DateTime?
  checkedInBy String?   // Can store staff email or name
  staffId     String?   // NEW: Reference to Staff who checked in
  staff       Staff?    @relation(fields: [staffId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId])
  @@map("ticket_purchases")
}

enum TicketType {
  STUDENTS
  INDIVIDUAL
  CORPORATE

  @@map("ticket_type")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED

  @@map("payment_status")
}

model PaymentLinks {
  id         String   @id @default(uuid())
  type       String
  paymentUrl String
  linkId     String   @unique
  status     String
  createdAt  DateTime
  updatedAt  DateTime
}

model Sponsor {
  id          String  @id @default(cuid())
  name        String
  logo        String  @db.Text
  website     String?
  description String?
  isActive    Boolean @default(true)
  order       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sponsors")
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  // Relationship to blog posts
  posts BlogPost[] @relation("BlogPostCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model BlogPost {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text // Using Text for longer content
  image      String? // Optional image URL
  readTime   Int // Read time in minutes
  date       DateTime @default(now())
  isFeatured Boolean  @default(false)

  // Category relationship
  categoryId String
  category   Category @relation("BlogPostCategory", fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_posts")
}

// Add these models to your existing schema.prisma file

model Order {
  id            String      @id @default(cuid())
  customerName  String
  customerEmail String
  customerPhone String
  totalAmount   Float
  currency      String      @default("GMD")
  status        OrderStatus @default(PENDING)

  // Payment Details
  paymentIntentId      String?   @unique
  paymentLink          String?
  modemPayChargeId     String?   @unique
  transactionReference String?
  paymentMethod        String?
  expiresAt            DateTime?
  paidAt               DateTime?

  // Shipping
  shippingAddress String? // JSON string

  // Relations
  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  productName String
  quantity    Int
  price       Float
  subtotal    Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Update your existing Product model to add the relation:
model Product {
  id            String          @id @default(cuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  image         String
  category      ProductCategory
  inStock       Boolean         @default(true)
  rating        Float           @default(0)
  reviews       Int             @default(0)
  featured      Boolean         @default(false)
  isActive      Boolean         @default(true)
  order         Int             @default(0)

  // Add this relation
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([featured])
  @@index([isActive])
}

enum ProductCategory {
  APPAREL
  ACCESSORIES
  TECH
  BOOKS
  STICKERS
}

model Speaker {
  id        String   @id @default(cuid())
  name      String
  title     String
  company   String
  location  String
  image     String   @db.Text
  bio       String   @db.Text
  expertise String[] // Array of strings for expertise
  isKeynote Boolean  @default(false)
  isActive  Boolean  @default(true)
  order     Int      @default(0)

  // Session details
  sessionTitle       String
  sessionDescription String @db.Text
  sessionDuration    String
  sessionTrack       String
  sessionLevel       String

  // Social links (optional)
  linkedin String?
  twitter  String?
  github   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("speakers")
}



enum StaffRole {
  ADMIN
  FRONTDESK
  SECURITY
  
  @@map("staff_role")
}


model Staff {
  id           String     @id @default(cuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  role         StaffRole  @default(FRONTDESK)
  isActive     Boolean    @default(true)
  
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  lastLogin    DateTime?
  
  // Add this relation
  checkedInTickets TicketPurchase[]
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([email])
  @@index([isActive])
  @@map("staff")
}